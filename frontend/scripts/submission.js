/* eslint-disable no-useless-escape */
// code is generated by openAI codex
import { addHeader } from "../components/utils.js";
import { supabase } from "../lib/supabaseClient.js";

addHeader();

const root = document.getElementById("submission-root");
const submissionId = new URLSearchParams(window.location.search).get("id");
let submissionState = null;

let commentSkip = 0;
const commentLimit = 10;

init();

async function init() {
  if (!submissionId) {
    root.textContent = "Missing submission id.";
    return;
  }
  const submission = await (
    await fetch(`/submissions/byId/${submissionId}`)
  ).json();
  submissionState = submission;
  buildSubmissionView(submissionState);
  await loadMoreComments();
}

function buildSubmissionView(submission) {
  console.log("submission", submission);
  const {
    title,
    imageUrl,
    userId,
    createdAt,
    exif = {},
    counters = {},
  } = submission || {};

  const section = document.createElement("section");
  section.className = "submission-detail";

  const media = document.createElement("div");
  media.className = "submission-detail-media";
  const img = document.createElement("img");
  img.src = imageUrl;
  img.alt = title || "Submission";
  media.appendChild(img);

  const info = document.createElement("div");
  info.className = "submission-detail-info";
  const h1 = document.createElement("h1");
  h1.textContent = title || "Untitled Submission";
  const meta = document.createElement("p");
  const userShort = (userId || "user").split("-")[0];
  const dateStr = createdAt ? new Date(createdAt).toLocaleDateString() : "";
  meta.textContent = `By ${userShort} • ${dateStr}`;
  const likes = document.createElement("p");
  likes.textContent = `Likes: ${counters.likes ?? 0}`;

  const exifBlock = document.createElement("div");
  exifBlock.className = "exif-block";
  const exifItems = [];
  if (exif?.camera) exifItems.push(`Camera: ${exif.camera}`);
  if (exif?.f) exifItems.push(`f/${exif.f}`);
  if (exif?.iso) exifItems.push(`ISO ${exif.iso}`);
  if (exif?.shutter) exifItems.push(`${exif.shutter}`);
  if (exif?.focal) exifItems.push(`${exif.focal}mm`);
  exifBlock.textContent = exifItems.join(" • ");

  info.append(h1, meta, likes, exifBlock);

  // owner controls for submission — code is generated by openAI codex
  const currentUserId = window.localStorage.getItem("userId");
  if (
    currentUserId &&
    userId &&
    normalizeIdString(currentUserId) === normalizeIdString(userId)
  ) {
    const controls = document.createElement("div");
    controls.className = "row";
    const editBtn = document.createElement("button");
    editBtn.type = "button";
    editBtn.className = "button-secondary";
    editBtn.textContent = "Edit";
    const deleteBtn = document.createElement("button");
    deleteBtn.type = "button";
    deleteBtn.className = "button-secondary";
    deleteBtn.textContent = "Delete";
    controls.append(editBtn, deleteBtn);
    info.appendChild(controls);

    const editForm = document.createElement("form");
    editForm.className = "submission-edit-form";
    editForm.style.display = "none";
    editForm.innerHTML = `
      <input name=\"title\" type=\"text\" value=\"${escapeAttr(title || "")}\" placeholder=\"Title\" />
      <div class=\"row\">
        <input name=\"camera\" type=\"text\" value=\"${escapeAttr(exif?.camera || "")}\" placeholder=\"Camera\" />
        <input name=\"f\" type=\"text\" value=\"${escapeAttr(exif?.f || "")}\" placeholder=\"f number\" />
      </div>
      <div class=\"row\">
        <input name=\"iso\" type=\"number\" value=\"${escapeAttr(exif?.iso ?? "")}\" placeholder=\"ISO\" />
        <input name=\"shutter\" type=\"text\" value=\"${escapeAttr(exif?.shutter || "")}\" placeholder=\"Shutter\" />
        <input name=\"focal\" type=\"number\" value=\"${escapeAttr(exif?.focal ?? "")}\" placeholder=\"Focal (mm)\" />
      </div>
      <div class=\"row\"><input name=\"image\" type=\"file\" accept=\"image/*\" /></div>
      <div class=\"row\">
        <button class=\"button-primary\" type=\"submit\">Save</button>
        <button class=\"button-secondary\" type=\"button\" id=\"cancel-edit\">Cancel</button>
      </div>`;
    info.appendChild(editForm);

    editBtn.addEventListener("click", () => {
      editForm.style.display =
        editForm.style.display === "none" ? "block" : "none";
    });
    editForm.querySelector("#cancel-edit").addEventListener("click", () => {
      editForm.reset();
      editForm.style.display = "none";
    });
    editForm.addEventListener("submit", onSaveSubmissionEdit);

    deleteBtn.addEventListener("click", async () => {
      if (!confirm("Delete this submission?")) return;
      const id = idToString(submissionState?._id) || submissionId;
      const resp = await fetch(`/submissions/${id}`, { method: "DELETE" });
      const result = await resp.json();
      if (result?.result?.deletedCount === 1 || result?.result?.acknowledged) {
        const qid = idToString(submissionState?.challengeId);
        if (qid) window.location.href = `/pages/quest.html?id=${qid}`;
        else window.location.href = "/pages/quests.html";
      }
    });
  }

  const commentsSection = buildCommentsSection();

  section.append(media, info, commentsSection);
  root.appendChild(section);
}

function buildCommentsSection() {
  const wrap = document.createElement("section");
  wrap.className = "comments-section";

  const h2 = document.createElement("h2");
  h2.textContent = "Comments";

  const list = document.createElement("div");
  list.id = "comments-list";
  list.className = "comments-list";

  const form = document.createElement("form");
  form.id = "comment-form";
  form.className = "comment-form";
  form.innerHTML = `
    <textarea name="body" rows="3" placeholder="Share constructive feedback..."></textarea>
    <div class="row">
      <button type="submit" class="button-primary">Post Comment</button>
      <button type="button" id="load-more-comments" class="button-secondary">Load more</button>
    </div>
  `;

  form.addEventListener("submit", onSubmitComment);
  form
    .querySelector("#load-more-comments")
    .addEventListener("click", loadMoreComments);

  wrap.append(h2, list, form);
  return wrap;
}

async function onSubmitComment(e) {
  e.preventDefault();
  const userId = window.localStorage.getItem("userId");
  if (!userId) {
    alert("Please sign in to comment.");
    window.location.href = "/pages/login.html";
    return;
  }
  const fd = new FormData(e.currentTarget);
  const body = (fd.get("body") || "").toString().trim();
  if (!body) return;

  const resp = await fetch(`/comments/`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ submissionId, userId, body }),
  });
  const result = await resp.json();
  if (result?.result?.insertedId || result?.result?.acknowledged) {
    // prepend the comment and clear textarea
    const list = document.getElementById("comments-list");
    list.prepend(
      renderComment({
        _id: result?.result?.insertedId,
        body,
        userId,
        createdAt: new Date().toISOString(),
      })
    );
    e.target.reset();
  }
}

async function loadMoreComments() {
  const resp = await fetch(
    `/comments/bySubmissionId/${submissionId}?skip=${commentSkip}&limit=${commentLimit}`
  );
  const data = await resp.json();
  const list = document.getElementById("comments-list");
  (data || []).forEach((c) => list.append(renderComment(c)));
  commentSkip += commentLimit;
}

function renderComment(comment) {
  const { body = "", userId = "", createdAt } = comment || {};
  const item = document.createElement("div");
  item.className = "comment-item";
  const author = (userId || "user").split("-")[0];
  const dateStr = createdAt ? new Date(createdAt).toLocaleString() : "";

  const text = document.createElement("p");
  text.className = "comment-body";
  text.textContent = body;

  const meta = document.createElement("p");
  meta.className = "comment-meta";
  meta.textContent = `${author} • ${dateStr}`;

  item.append(meta, text);

  const currentUserId = window.localStorage.getItem("userId");
  if (
    currentUserId &&
    normalizeIdString(currentUserId) === normalizeIdString(userId)
  ) {
    const row = document.createElement("div");
    row.className = "row";
    const edit = document.createElement("button");
    edit.type = "button";
    edit.className = "button-secondary";
    edit.textContent = "Edit";
    const del = document.createElement("button");
    del.type = "button";
    del.className = "button-secondary";
    del.textContent = "Delete";
    row.append(edit, del);
    item.append(row);

    edit.addEventListener("click", () => {
      const ta = document.createElement("textarea");
      ta.value = body;
      ta.rows = 3;
      const save = document.createElement("button");
      save.type = "button";
      save.className = "button-primary";
      save.textContent = "Save";
      const cancel = document.createElement("button");
      cancel.type = "button";
      cancel.className = "button-secondary";
      cancel.textContent = "Cancel";
      const controls = document.createElement("div");
      controls.className = "row";
      controls.append(save, cancel);

      item.replaceChild(ta, text);
      item.appendChild(controls);

      cancel.addEventListener("click", () => {
        item.replaceChild(text, ta);
        controls.remove();
      });
      save.addEventListener("click", async () => {
        const id = idToString(comment?._id);
        if (!id) return;
        const resp = await fetch(`/comments/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ body: ta.value }),
        });
        const res = await resp.json();
        if (res?.result?.modifiedCount === 1 || res?.result?.acknowledged) {
          text.textContent = ta.value;
          item.replaceChild(text, ta);
          controls.remove();
        }
      });
    });

    del.addEventListener("click", async () => {
      if (!confirm("Delete this comment?")) return;
      const id = idToString(comment?._id);
      if (!id) return;
      const resp = await fetch(`/comments/${id}`, { method: "DELETE" });
      const res = await resp.json();
      if (res?.result?.deletedCount === 1 || res?.result?.acknowledged) {
        item.remove();
      }
    });
  }

  return item;
}

function escapeAttr(str) {
  return String(str)
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;")
    .replaceAll('"', "&quot;");
}

// helpers — code is generated by openAI codex
function idToString(id) {
  if (!id) return "";
  if (typeof id === "string") return id;
  if (typeof id === "object" && id.$oid) return id.$oid;
  return String(id);
}

function normalizeIdString(val) {
  if (!val) return "";
  const s = typeof val === "string" ? val : idToString(val);
  return s.toLowerCase();
}

async function onSaveSubmissionEdit(e) {
  e.preventDefault();
  const id = idToString(submissionState?._id) || submissionId;
  const fd = new FormData(e.currentTarget);
  const title = (fd.get("title") || "").toString();
  const image = fd.get("image");
  const exif = {
    camera: (fd.get("camera") || "").toString(),
    f: (fd.get("f") || "").toString(),
    iso: Number(fd.get("iso")) || undefined,
    shutter: (fd.get("shutter") || "").toString(),
    focal: Number(fd.get("focal")) || undefined,
  };
  Object.keys(exif).forEach((k) => {
    if (exif[k] === "" || exif[k] === undefined || Number.isNaN(exif[k]))
      delete exif[k];
  });

  let imageUrl = submissionState?.imageUrl;
  if (image instanceof File && image.name) {
    const user = window.localStorage.getItem("userId") || "anonymous";
    const ext = image.name.split(".").pop();
    const path = `submissions/${user}/${Date.now()}.${ext}`;
    const { error } = await supabase.storage
      .from("photoQuestImage")
      .upload(path, image, { upsert: false });
    if (error) {
      alert("Image upload failed");
      return;
    }
    const { data } = supabase.storage
      .from("photoQuestImage")
      .getPublicUrl(path);
    imageUrl = data.publicUrl;
  }

  const resp = await fetch(`/submissions/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ title, imageUrl, exif }),
  });
  const res = await resp.json();
  if (res?.result?.modifiedCount === 1 || res?.result?.acknowledged) {
    window.location.reload();
  }
}
